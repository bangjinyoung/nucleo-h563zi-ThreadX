
nucleo-h563zi-ThreadX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003908  08003908  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003908  08003908  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003908  08003908  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003908  08003908  00004908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003910  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008744  20000010  08003920  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008754  08003920  00005754  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f542  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003708  00000000  00000000  00014588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00017c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065c  00000000  00000000  00018638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032764  00000000  00000000  00018c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012359  00000000  00000000  0004b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130662  00000000  00000000  0005d751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ddb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf8  00000000  00000000  0018ddf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e8  00000000  00000000  0018f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000010 	.word	0x20000010
 8000268:	00000000 	.word	0x00000000
 800026c:	080038a8 	.word	0x080038a8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000014 	.word	0x20000014
 8000288:	080038a8 	.word	0x080038a8

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	@ (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	@ (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	@ (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	@ (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20008148 	.word	0x20008148
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	@ (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	@ (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	@ (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	200081e4 	.word	0x200081e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	2000814c 	.word	0x2000814c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20008150 	.word	0x20008150
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20008750 	.word	0x20008750

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	@ (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	@ (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	@ (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f002 fdb6 	bl	8002fd8 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f002 fd23 	bl	8002ebc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	@ (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	200081f0 	.word	0x200081f0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20008750 	.word	0x20008750
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	200081f4 	.word	0x200081f4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	20008280 	.word	0x20008280
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	20008284 	.word	0x20008284
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	2000827c 	.word	0x2000827c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	20008278 	.word	0x20008278
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	200081e4 	.word	0x200081e4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	2000814c 	.word	0x2000814c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20008150 	.word	0x20008150
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	@ 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004dc:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <tx_application_define+0x44>)
 80004de:	490c      	ldr	r1, [pc, #48]	@ (8000510 <tx_application_define+0x48>)
 80004e0:	480c      	ldr	r0, [pc, #48]	@ (8000514 <tx_application_define+0x4c>)
 80004e2:	f003 f823 	bl	800352c <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d10a      	bne.n	8000502 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <tx_application_define+0x4c>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f811 	bl	8000518 <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	080038c0 	.word	0x080038c0
 8000514:	2000802c 	.word	0x2000802c

08000518 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	@ 0x38
 800051c:	af08      	add	r7, sp, #32
 800051e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	613b      	str	r3, [r7, #16]

  /* USER CODE END App_ThreadX_MEM_POOL */
  CHAR *pointer;

  /* Allocate the stack for tx app thread  */
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8000528:	f107 010c 	add.w	r1, r7, #12
 800052c:	2300      	movs	r3, #0
 800052e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000532:	6938      	ldr	r0, [r7, #16]
 8000534:	f002 ff86 	bl	8003444 <_txe_byte_allocate>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <App_ThreadX_Init+0x2a>
                       TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 800053e:	2302      	movs	r3, #2
 8000540:	e01a      	b.n	8000578 <App_ThreadX_Init+0x60>
  }
  /* Create tx app thread.  */
  if (tx_thread_create(&tx_app_thread, "tx app thread", tx_app_thread_entry, 0, pointer,
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	22b0      	movs	r2, #176	@ 0xb0
 8000546:	9206      	str	r2, [sp, #24]
 8000548:	2201      	movs	r2, #1
 800054a:	9205      	str	r2, [sp, #20]
 800054c:	2200      	movs	r2, #0
 800054e:	9204      	str	r2, [sp, #16]
 8000550:	220a      	movs	r2, #10
 8000552:	9203      	str	r2, [sp, #12]
 8000554:	220a      	movs	r2, #10
 8000556:	9202      	str	r2, [sp, #8]
 8000558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800055c:	9201      	str	r2, [sp, #4]
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <App_ThreadX_Init+0x68>)
 8000564:	4907      	ldr	r1, [pc, #28]	@ (8000584 <App_ThreadX_Init+0x6c>)
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <App_ThreadX_Init+0x70>)
 8000568:	f003 f880 	bl	800366c <_txe_thread_create>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <App_ThreadX_Init+0x5e>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 8000572:	230e      	movs	r3, #14
 8000574:	e000      	b.n	8000578 <App_ThreadX_Init+0x60>
  }

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000576:	697b      	ldr	r3, [r7, #20]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800058d 	.word	0x0800058d
 8000584:	080038d4 	.word	0x080038d4
 8000588:	20008060 	.word	0x20008060

0800058c <tx_app_thread_entry>:
  * @brief  Function implementing the tx_app_thread_entry thread.
  * @param  thread_input: Hardcoded to 0.
  * @retval None
  */
void tx_app_thread_entry(ULONG thread_input)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tx_app_thread_entry */

  while (1) {
    tx_thread_sleep(100);
 8000594:	2064      	movs	r0, #100	@ 0x64
 8000596:	f002 f9bf 	bl	8002918 <_tx_thread_sleep>
    HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4); // Yellow LED 토글
 800059a:	2110      	movs	r1, #16
 800059c:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <tx_app_thread_entry+0x2c>)
 800059e:	f000 fd87 	bl	80010b0 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Green LED 토글
 80005a2:	2101      	movs	r1, #1
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <tx_app_thread_entry+0x30>)
 80005a6:	f000 fd83 	bl	80010b0 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_4); // Red LED 토글
 80005aa:	2110      	movs	r1, #16
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <tx_app_thread_entry+0x34>)
 80005ae:	f000 fd7f 	bl	80010b0 <HAL_GPIO_TogglePin>
    tx_thread_sleep(100);
 80005b2:	bf00      	nop
 80005b4:	e7ee      	b.n	8000594 <tx_app_thread_entry+0x8>
 80005b6:	bf00      	nop
 80005b8:	42021400 	.word	0x42021400
 80005bc:	42020400 	.word	0x42020400
 80005c0:	42021800 	.word	0x42021800

080005c4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80005c8:	f001 fffe 	bl	80025c8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 f9f4 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f808 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f878 	bl	80006d0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005e0:	f000 f86a 	bl	80006b8 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005e4:	f7ff ffee 	bl	80005c4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x18>

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2250      	movs	r2, #80	@ 0x50
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f928 	bl	8003850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000612:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000618:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800061c:	6113      	str	r3, [r2, #16]
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xc8>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800062a:	bf00      	nop
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <SystemClock_Config+0xc8>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	2b08      	cmp	r3, #8
 8000636:	d1f9      	bne.n	800062c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 800063c:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000646:	2303      	movs	r3, #3
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800064e:	23fa      	movs	r3, #250	@ 0xfa
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000656:	2302      	movs	r3, #2
 8000658:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800065e:	2304      	movs	r3, #4
 8000660:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000662:	2300      	movs	r3, #0
 8000664:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fd48 	bl	8001104 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800067a:	f000 f8d3 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	231f      	movs	r3, #31
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2105      	movs	r1, #5
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f969 	bl	8001974 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a8:	f000 f8bc 	bl	8000824 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3770      	adds	r7, #112	@ 0x70
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	44020800 	.word	0x44020800

080006b8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006bc:	f000 fd12 	bl	80010e4 <HAL_ICACHE_Enable>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80006c6:	f000 f8ad 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08c      	sub	sp, #48	@ 0x30
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000814 <MX_GPIO_Init+0x144>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a49      	ldr	r2, [pc, #292]	@ (8000814 <MX_GPIO_Init+0x144>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <MX_GPIO_Init+0x144>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000704:	4b43      	ldr	r3, [pc, #268]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a42      	ldr	r2, [pc, #264]	@ (8000814 <MX_GPIO_Init+0x144>)
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b3f      	ldr	r3, [pc, #252]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	4b3c      	ldr	r3, [pc, #240]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <MX_GPIO_Init+0x144>)
 800072a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800072e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000732:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000746:	4a33      	ldr	r2, [pc, #204]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000750:	4b30      	ldr	r3, [pc, #192]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000764:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800076a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800076e:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b25      	ldr	r3, [pc, #148]	@ (8000814 <MX_GPIO_Init+0x144>)
 800077e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000782:	4a24      	ldr	r2, [pc, #144]	@ (8000814 <MX_GPIO_Init+0x144>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078c:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <MX_GPIO_Init+0x144>)
 800078e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <MX_GPIO_Init+0x148>)
 80007a0:	f000 fc6e 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2101      	movs	r1, #1
 80007a8:	481c      	ldr	r0, [pc, #112]	@ (800081c <MX_GPIO_Init+0x14c>)
 80007aa:	f000 fc69 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2110      	movs	r1, #16
 80007b2:	481b      	ldr	r0, [pc, #108]	@ (8000820 <MX_GPIO_Init+0x150>)
 80007b4:	f000 fc64 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b8:	2310      	movs	r3, #16
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4812      	ldr	r0, [pc, #72]	@ (8000818 <MX_GPIO_Init+0x148>)
 80007d0:	f000 fb04 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_GPIO_Init+0x14c>)
 80007ec:	f000 faf6 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007f0:	2310      	movs	r3, #16
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_GPIO_Init+0x150>)
 8000808:	f000 fae8 	bl	8000ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	@ 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	44020c00 	.word	0x44020c00
 8000818:	42021400 	.word	0x42021400
 800081c:	42020400 	.word	0x42020400
 8000820:	42021800 	.word	0x42021800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000842:	bf00      	nop
 8000844:	e7fd      	b.n	8000842 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	bf00      	nop
 800084c:	e7fd      	b.n	800084a <HardFault_Handler+0x4>

0800084e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000852:	bf00      	nop
 8000854:	e7fd      	b.n	8000852 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <BusFault_Handler+0x4>

0800085e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000862:	bf00      	nop
 8000864:	e7fd      	b.n	8000862 <UsageFault_Handler+0x4>

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800087a:	4b35      	ldr	r3, [pc, #212]	@ (8000950 <SystemInit+0xdc>)
 800087c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000880:	4a33      	ldr	r2, [pc, #204]	@ (8000950 <SystemInit+0xdc>)
 8000882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000886:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <SystemInit+0xe0>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000890:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <SystemInit+0xe0>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000896:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <SystemInit+0xe0>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800089c:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <SystemInit+0xe0>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	492c      	ldr	r1, [pc, #176]	@ (8000954 <SystemInit+0xe0>)
 80008a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <SystemInit+0xe4>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <SystemInit+0xe0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80008ae:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <SystemInit+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <SystemInit+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <SystemInit+0xe0>)
 80008bc:	4a27      	ldr	r2, [pc, #156]	@ (800095c <SystemInit+0xe8>)
 80008be:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <SystemInit+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <SystemInit+0xe0>)
 80008c8:	4a24      	ldr	r2, [pc, #144]	@ (800095c <SystemInit+0xe8>)
 80008ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <SystemInit+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <SystemInit+0xe0>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <SystemInit+0xe8>)
 80008d6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <SystemInit+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <SystemInit+0xe0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000954 <SystemInit+0xe0>)
 80008e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <SystemInit+0xe0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <SystemInit+0xdc>)
 80008f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80008f6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <SystemInit+0xec>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000900:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000908:	d003      	beq.n	8000912 <SystemInit+0x9e>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000910:	d117      	bne.n	8000942 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <SystemInit+0xec>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <SystemInit+0xec>)
 8000920:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <SystemInit+0xf0>)
 8000922:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <SystemInit+0xec>)
 8000926:	4a10      	ldr	r2, [pc, #64]	@ (8000968 <SystemInit+0xf4>)
 8000928:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <SystemInit+0xec>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0c      	ldr	r2, [pc, #48]	@ (8000960 <SystemInit+0xec>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <SystemInit+0xec>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <SystemInit+0xec>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	61d3      	str	r3, [r2, #28]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	44020c00 	.word	0x44020c00
 8000958:	eae2eae3 	.word	0xeae2eae3
 800095c:	01010280 	.word	0x01010280
 8000960:	40022000 	.word	0x40022000
 8000964:	08192a3b 	.word	0x08192a3b
 8000968:	4c5d6e7f 	.word	0x4c5d6e7f

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000970:	f7ff ff80 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <LoopForever+0xe>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800098c:	4c0a      	ldr	r4, [pc, #40]	@ (80009b8 <LoopForever+0x16>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800099a:	f002 ff61 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff fe17 	bl	80005d0 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   r0, =_estack
 80009a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b0:	08003910 	.word	0x08003910
  ldr r2, =_sbss
 80009b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b8:	20008754 	.word	0x20008754

080009bc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f934 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80009ca:	f001 f98b 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_Init+0x44>)
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	490b      	ldr	r1, [pc, #44]	@ (8000a08 <HAL_Init+0x48>)
 80009da:	5ccb      	ldrb	r3, [r1, r3]
 80009dc:	fa22 f303 	lsr.w	r3, r2, r3
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_Init+0x4c>)
 80009e2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009e4:	2004      	movs	r0, #4
 80009e6:	f000 f96b 	bl	8000cc0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f810 	bl	8000a10 <HAL_InitTick>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e002      	b.n	8000a00 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009fa:	f7ff ff19 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	44020c00 	.word	0x44020c00
 8000a08:	080038f8 	.word	0x080038f8
 8000a0c:	20000000 	.word	0x20000000

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000a1c:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <HAL_InitTick+0xdc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d101      	bne.n	8000a28 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e05c      	b.n	8000ae2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_InitTick+0xe0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d10c      	bne.n	8000a4e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000a34:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_InitTick+0xe4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <HAL_InitTick+0xdc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e037      	b.n	8000abe <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000a4e:	f000 f98f 	bl	8000d70 <HAL_SYSTICK_GetCLKSourceConfig>
 8000a52:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d023      	beq.n	8000aa2 <HAL_InitTick+0x92>
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d82d      	bhi.n	8000abc <HAL_InitTick+0xac>
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_InitTick+0x5e>
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00d      	beq.n	8000a88 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000a6c:	e026      	b.n	8000abc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000a6e:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <HAL_InitTick+0xe4>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <HAL_InitTick+0xdc>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a84:	60fb      	str	r3, [r7, #12]
        break;
 8000a86:	e01a      	b.n	8000abe <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_InitTick+0xdc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a96:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	60fb      	str	r3, [r7, #12]
        break;
 8000aa0:	e00d      	b.n	8000abe <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0xdc>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ab0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	60fb      	str	r3, [r7, #12]
        break;
 8000aba:	e000      	b.n	8000abe <HAL_InitTick+0xae>
        break;
 8000abc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f8dc 	bl	8000c7c <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e009      	b.n	8000ae2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad6:	f000 f8b7 	bl	8000c48 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000ada:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_InitTick+0xe8>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	e000e010 	.word	0xe000e010
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20008110 	.word	0x20008110

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	@ (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	@ 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff6a 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c56:	f7ff ff81 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68b9      	ldr	r1, [r7, #8]
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f7ff ffb3 	bl	8000bcc <NVIC_EncodePriority>
 8000c66:	4602      	mov	r2, r0
 8000c68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff82 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00d      	b.n	8000cae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <HAL_SYSTICK_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_SYSTICK_Config+0x40>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_SYSTICK_Config+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <HAL_SYSTICK_Config+0x40>)
 8000ca6:	f043 0303 	orr.w	r3, r3, #3
 8000caa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d844      	bhi.n	8000d58 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000cce:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000cf7 	.word	0x08000cf7
 8000cd8:	08000d15 	.word	0x08000d15
 8000cdc:	08000d37 	.word	0x08000d37
 8000ce0:	08000d59 	.word	0x08000d59
 8000ce4:	08000ce9 	.word	0x08000ce9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6013      	str	r3, [r2, #0]
      break;
 8000cf4:	e031      	b.n	8000d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000cfc:	f023 0304 	bic.w	r3, r3, #4
 8000d00:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d08:	4a18      	ldr	r2, [pc, #96]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d0a:	f023 030c 	bic.w	r3, r3, #12
 8000d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d12:	e022      	b.n	8000d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a13      	ldr	r2, [pc, #76]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d1a:	f023 0304 	bic.w	r3, r3, #4
 8000d1e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d26:	f023 030c 	bic.w	r3, r3, #12
 8000d2a:	4a10      	ldr	r2, [pc, #64]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d34:	e011      	b.n	8000d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000d3c:	f023 0304 	bic.w	r3, r3, #4
 8000d40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d48:	f023 030c 	bic.w	r3, r3, #12
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000d56:	e000      	b.n	8000d5a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000d58:	bf00      	nop
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010
 8000d6c:	44020c00 	.word	0x44020c00

08000d70 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000d82:	2304      	movs	r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	e01e      	b.n	8000dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d8e:	f003 030c 	and.w	r3, r3, #12
 8000d92:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d00f      	beq.n	8000dba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d80f      	bhi.n	8000dc0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d003      	beq.n	8000db4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000dac:	e008      	b.n	8000dc0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
        break;
 8000db2:	e008      	b.n	8000dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000db4:	2301      	movs	r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
        break;
 8000db8:	e005      	b.n	8000dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	607b      	str	r3, [r7, #4]
        break;
 8000dbe:	e002      	b.n	8000dc6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
        break;
 8000dc4:	bf00      	nop
    }
  }
  return systick_source;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	44020c00 	.word	0x44020c00

08000ddc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dea:	e136      	b.n	800105a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8128 	beq.w	8001054 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x38>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b12      	cmp	r3, #18
 8000e12:	d125      	bne.n	8000e60 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	f003 020f 	and.w	r2, r3, #15
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	6979      	ldr	r1, [r7, #20]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d00b      	beq.n	8000eb4 <HAL_GPIO_Init+0xd8>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d007      	beq.n	8000eb4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d130      	bne.n	8000f16 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eea:	2201      	movs	r2, #1
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	f003 0201 	and.w	r2, r3, #1
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4013      	ands	r3, r2
 8000f34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d07c      	beq.n	8001054 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f5a:	4a47      	ldr	r2, [pc, #284]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3318      	adds	r3, #24
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	0a9a      	lsrs	r2, r3, #10
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <HAL_GPIO_Init+0x2a0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f96:	4938      	ldr	r1, [pc, #224]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000fa4:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000ff2:	4a21      	ldr	r2, [pc, #132]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8000ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ffe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4013      	ands	r3, r2
 8001008:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800101e:	4a16      	ldr	r2, [pc, #88]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 8001028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_GPIO_Init+0x29c>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	3301      	adds	r3, #1
 8001058:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	f47f aec1 	bne.w	8000dec <HAL_GPIO_Init+0x10>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	44022000 	.word	0x44022000
 800107c:	002f7f7f 	.word	0x002f7f7f

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4013      	ands	r3, r2
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43d9      	mvns	r1, r3
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	400b      	ands	r3, r1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_ICACHE_Enable+0x1c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_ICACHE_Enable+0x1c>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40030400 	.word	0x40030400

08001104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	f000 bc28 	b.w	8001968 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001118:	4b94      	ldr	r3, [pc, #592]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f003 0318 	and.w	r3, r3, #24
 8001120:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001122:	4b92      	ldr	r3, [pc, #584]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	2b00      	cmp	r3, #0
 8001136:	d05b      	beq.n	80011f0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x46>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	2b18      	cmp	r3, #24
 8001142:	d114      	bne.n	800116e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d111      	bne.n	800116e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	f000 bc08 	b.w	8001968 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001158:	4b84      	ldr	r3, [pc, #528]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	4981      	ldr	r1, [pc, #516]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001168:	4313      	orrs	r3, r2
 800116a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800116c:	e040      	b.n	80011f0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001176:	4b7d      	ldr	r3, [pc, #500]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a7c      	ldr	r2, [pc, #496]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fcbb 	bl	8000afc <HAL_GetTick>
 8001186:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800118a:	f7ff fcb7 	bl	8000afc <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e3e5      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800119c:	4b73      	ldr	r3, [pc, #460]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80011a8:	4b70      	ldr	r3, [pc, #448]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	496d      	ldr	r1, [pc, #436]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	618b      	str	r3, [r1, #24]
 80011bc:	e018      	b.n	80011f0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011be:	4b6b      	ldr	r3, [pc, #428]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc97 	bl	8000afc <HAL_GetTick>
 80011ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc93 	bl	8000afc <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e3c1      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80011e4:	4b61      	ldr	r3, [pc, #388]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a0 	beq.w	800133e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b10      	cmp	r3, #16
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x10c>
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b18      	cmp	r3, #24
 8001208:	d109      	bne.n	800121e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d106      	bne.n	800121e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 8092 	bne.w	800133e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e3a4      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x132>
 8001228:	4b50      	ldr	r3, [pc, #320]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800122e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e058      	b.n	80012e8 <HAL_RCC_OscConfig+0x1e4>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d112      	bne.n	8001264 <HAL_RCC_OscConfig+0x160>
 800123e:	4b4b      	ldr	r3, [pc, #300]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a4a      	ldr	r2, [pc, #296]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b48      	ldr	r3, [pc, #288]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a47      	ldr	r2, [pc, #284]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001250:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a44      	ldr	r2, [pc, #272]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e041      	b.n	80012e8 <HAL_RCC_OscConfig+0x1e4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x190>
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a3e      	ldr	r2, [pc, #248]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b3c      	ldr	r3, [pc, #240]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001280:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b39      	ldr	r3, [pc, #228]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a38      	ldr	r2, [pc, #224]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e029      	b.n	80012e8 <HAL_RCC_OscConfig+0x1e4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800129c:	d112      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1c0>
 800129e:	4b33      	ldr	r3, [pc, #204]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a32      	ldr	r2, [pc, #200]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b30      	ldr	r3, [pc, #192]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2c      	ldr	r2, [pc, #176]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e011      	b.n	80012e8 <HAL_RCC_OscConfig+0x1e4>
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a25      	ldr	r2, [pc, #148]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 80012e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc04 	bl	8000afc <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc00 	bl	8000afc <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e32e      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1f4>
 8001316:	e012      	b.n	800133e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fbf0 	bl	8000afc <HAL_GetTick>
 800131c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001320:	f7ff fbec 	bl	8000afc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e31a      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_RCC_OscConfig+0x268>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 809a 	beq.w	8001480 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x25a>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2b18      	cmp	r3, #24
 8001356:	d149      	bne.n	80013ec <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d146      	bne.n	80013ec <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d104      	bne.n	8001370 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e2fe      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
 800136a:	bf00      	nop
 800136c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001376:	4b9a      	ldr	r3, [pc, #616]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0218 	and.w	r2, r3, #24
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	429a      	cmp	r2, r3
 8001384:	d014      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001386:	4b96      	ldr	r3, [pc, #600]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0218 	bic.w	r2, r3, #24
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	4993      	ldr	r1, [pc, #588]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001398:	f000 fdd0 	bl	8001f3c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800139c:	4b91      	ldr	r3, [pc, #580]	@ (80015e4 <HAL_RCC_OscConfig+0x4e0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fb35 	bl	8000a10 <HAL_InitTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e2db      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fba4 	bl	8000afc <HAL_GetTick>
 80013b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fba0 	bl	8000afc <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e2ce      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ca:	4b85      	ldr	r3, [pc, #532]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80013d6:	4b82      	ldr	r3, [pc, #520]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	497e      	ldr	r1, [pc, #504]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80013ea:	e049      	b.n	8001480 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d02c      	beq.n	800144e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80013f4:	4b7a      	ldr	r3, [pc, #488]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 0218 	bic.w	r2, r3, #24
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4977      	ldr	r1, [pc, #476]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001406:	4b76      	ldr	r3, [pc, #472]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a75      	ldr	r2, [pc, #468]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fb73 	bl	8000afc <HAL_GetTick>
 8001416:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800141a:	f7ff fb6f 	bl	8000afc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e29d      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800142c:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001438:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	4966      	ldr	r1, [pc, #408]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001448:	4313      	orrs	r3, r2
 800144a:	610b      	str	r3, [r1, #16]
 800144c:	e018      	b.n	8001480 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144e:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a63      	ldr	r2, [pc, #396]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fb4f 	bl	8000afc <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001462:	f7ff fb4b 	bl	8000afc <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e279      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001474:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03c      	beq.n	8001506 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01c      	beq.n	80014ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001494:	4b52      	ldr	r3, [pc, #328]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800149a:	4a51      	ldr	r2, [pc, #324]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800149c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fb2a 	bl	8000afc <HAL_GetTick>
 80014a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fb26 	bl	8000afc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e254      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80014be:	4b48      	ldr	r3, [pc, #288]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80014c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ef      	beq.n	80014ac <HAL_RCC_OscConfig+0x3a8>
 80014cc:	e01b      	b.n	8001506 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80014d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014d4:	4a42      	ldr	r2, [pc, #264]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80014d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80014da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff fb0d 	bl	8000afc <HAL_GetTick>
 80014e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb09 	bl	8000afc <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e237      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ef      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80d2 	beq.w	80016b8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001514:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <HAL_RCC_OscConfig+0x4e4>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001520:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_RCC_OscConfig+0x4e4>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	4a30      	ldr	r2, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x4e4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152c:	f7ff fae6 	bl	8000afc <HAL_GetTick>
 8001530:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fae2 	bl	8000afc <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e210      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <HAL_RCC_OscConfig+0x4e4>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x468>
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001560:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800156a:	e074      	b.n	8001656 <HAL_RCC_OscConfig+0x552>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d118      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4a2>
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800157a:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001590:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 8001596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800159a:	4a11      	ldr	r2, [pc, #68]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015a4:	e057      	b.n	8001656 <HAL_RCC_OscConfig+0x552>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d11e      	bne.n	80015ec <HAL_RCC_OscConfig+0x4e8>
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d4:	4a02      	ldr	r2, [pc, #8]	@ (80015e0 <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015de:	e03a      	b.n	8001656 <HAL_RCC_OscConfig+0x552>
 80015e0:	44020c00 	.word	0x44020c00
 80015e4:	20000004 	.word	0x20000004
 80015e8:	44020800 	.word	0x44020800
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b85      	cmp	r3, #133	@ 0x85
 80015f2:	d118      	bne.n	8001626 <HAL_RCC_OscConfig+0x522>
 80015f4:	4ba2      	ldr	r3, [pc, #648]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80015f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015fa:	4aa1      	ldr	r2, [pc, #644]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001604:	4b9e      	ldr	r3, [pc, #632]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800160a:	4a9d      	ldr	r2, [pc, #628]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001614:	4b9a      	ldr	r3, [pc, #616]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800161a:	4a99      	ldr	r2, [pc, #612]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001624:	e017      	b.n	8001656 <HAL_RCC_OscConfig+0x552>
 8001626:	4b96      	ldr	r3, [pc, #600]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162c:	4a94      	ldr	r2, [pc, #592]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001636:	4b92      	ldr	r3, [pc, #584]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163c:	4a90      	ldr	r2, [pc, #576]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001646:	4b8e      	ldr	r3, [pc, #568]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800164c:	4a8c      	ldr	r2, [pc, #560]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800164e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fa4d 	bl	8000afc <HAL_GetTick>
 8001662:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fa49 	bl	8000afc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e175      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167c:	4b80      	ldr	r3, [pc, #512]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800167e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ed      	beq.n	8001666 <HAL_RCC_OscConfig+0x562>
 800168a:	e015      	b.n	80016b8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fa36 	bl	8000afc <HAL_GetTick>
 8001690:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fa32 	bl	8000afc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e15e      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016aa:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80016ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ed      	bne.n	8001694 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d036      	beq.n	8001732 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d019      	beq.n	8001700 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa10 	bl	8000afc <HAL_GetTick>
 80016dc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80016e0:	f7ff fa0c 	bl	8000afc <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e13a      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016f2:	4b63      	ldr	r3, [pc, #396]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x5dc>
 80016fe:	e018      	b.n	8001732 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001700:	4b5f      	ldr	r3, [pc, #380]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5e      	ldr	r2, [pc, #376]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800170a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff f9f6 	bl	8000afc <HAL_GetTick>
 8001710:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001714:	f7ff f9f2 	bl	8000afc <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e120      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001726:	4b56      	ldr	r3, [pc, #344]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8115 	beq.w	8001966 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b18      	cmp	r3, #24
 8001740:	f000 80af 	beq.w	80018a2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	2b02      	cmp	r3, #2
 800174a:	f040 8086 	bne.w	800185a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800174e:	4b4c      	ldr	r3, [pc, #304]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4b      	ldr	r2, [pc, #300]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff f9cf 	bl	8000afc <HAL_GetTick>
 800175e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001762:	f7ff f9cb 	bl	8000afc <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0f9      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001774:	4b42      	ldr	r3, [pc, #264]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001780:	4b3f      	ldr	r3, [pc, #252]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001794:	0212      	lsls	r2, r2, #8
 8001796:	430a      	orrs	r2, r1
 8001798:	4939      	ldr	r1, [pc, #228]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	628b      	str	r3, [r1, #40]	@ 0x28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ac:	3b01      	subs	r3, #1
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	3b01      	subs	r3, #1
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80017ce:	492c      	ldr	r1, [pc, #176]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80017d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017da:	f023 0310 	bic.w	r3, r3, #16
 80017de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	4a26      	ldr	r2, [pc, #152]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80017ea:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	4a24      	ldr	r2, [pc, #144]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	f023 020c 	bic.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	491f      	ldr	r1, [pc, #124]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001808:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	f023 0220 	bic.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001814:	491a      	ldr	r1, [pc, #104]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800181c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181e:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001824:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a15      	ldr	r2, [pc, #84]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800182c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f963 	bl	8000afc <HAL_GetTick>
 8001836:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800183a:	f7ff f95f 	bl	8000afc <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e08d      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x736>
 8001858:	e085      	b.n	8001966 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_RCC_OscConfig+0x77c>)
 8001860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff f949 	bl	8000afc <HAL_GetTick>
 800186a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800186e:	f7ff f945 	bl	8000afc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d903      	bls.n	8001884 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e073      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
 8001880:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	4a36      	ldr	r2, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001896:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	6293      	str	r3, [r2, #40]	@ 0x28
 80018a0:	e061      	b.n	8001966 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018a8:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ac:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d031      	beq.n	800191a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d12a      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d122      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d11a      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0a5b      	lsrs	r3, r3, #9
 80018e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d111      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001902:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d108      	bne.n	800191a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0e1b      	lsrs	r3, r3, #24
 800190c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e024      	b.n	8001968 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800191e:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800192c:	429a      	cmp	r2, r3
 800192e:	d01a      	beq.n	8001966 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001930:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001936:	f023 0310 	bic.w	r3, r3, #16
 800193a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff f8de 	bl	8000afc <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001942:	bf00      	nop
 8001944:	f7ff f8da 	bl	8000afc <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4293      	cmp	r3, r2
 800194e:	d0f9      	beq.n	8001944 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_RCC_OscConfig+0x86c>)
 8001960:	f043 0310 	orr.w	r3, r3, #16
 8001964:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	44020c00 	.word	0x44020c00

08001974 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e19e      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b83      	ldr	r3, [pc, #524]	@ (8001b98 <HAL_RCC_ClockConfig+0x224>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b80      	ldr	r3, [pc, #512]	@ (8001b98 <HAL_RCC_ClockConfig+0x224>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 020f 	bic.w	r2, r3, #15
 800199e:	497e      	ldr	r1, [pc, #504]	@ (8001b98 <HAL_RCC_ClockConfig+0x224>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <HAL_RCC_ClockConfig+0x224>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e186      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d012      	beq.n	80019ea <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	4b74      	ldr	r3, [pc, #464]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d909      	bls.n	80019ea <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80019d6:	4b71      	ldr	r3, [pc, #452]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	496d      	ldr	r1, [pc, #436]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d012      	beq.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	4b68      	ldr	r3, [pc, #416]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d909      	bls.n	8001a1c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001a08:	4b64      	ldr	r3, [pc, #400]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4961      	ldr	r1, [pc, #388]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d010      	beq.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d908      	bls.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001a38:	4b58      	ldr	r3, [pc, #352]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4955      	ldr	r1, [pc, #340]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d010      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d908      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	f023 020f 	bic.w	r2, r3, #15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	494a      	ldr	r1, [pc, #296]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8093 	beq.w	8001bac <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a8e:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d121      	bne.n	8001ade <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e113      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e107      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0fb      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ace:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0f3      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001ade:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	492c      	ldr	r1, [pc, #176]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af0:	f7ff f804 	bl	8000afc <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7fe fffc 	bl	8000afc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0d7      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0318 	and.w	r3, r3, #24
 8001b1e:	2b18      	cmp	r3, #24
 8001b20:	d1ee      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x18c>
 8001b22:	e043      	b.n	8001bac <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d112      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2e:	f7fe ffe5 	bl	8000afc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0c0      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	f003 0318 	and.w	r3, r3, #24
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>
 8001b50:	e02c      	b.n	8001bac <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d122      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b5a:	e00a      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5c:	f7fe ffce 	bl	8000afc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e0a9      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x228>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0318 	and.w	r3, r3, #24
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d1ee      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x1e8>
 8001b7e:	e015      	b.n	8001bac <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe ffbc 	bl	8000afc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d906      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e097      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 0318 	and.w	r3, r3, #24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b44      	ldr	r3, [pc, #272]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d208      	bcs.n	8001bda <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001bc8:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f023 020f 	bic.w	r2, r3, #15
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	493e      	ldr	r1, [pc, #248]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <HAL_RCC_ClockConfig+0x360>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d210      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd4 <HAL_RCC_ClockConfig+0x360>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 020f 	bic.w	r2, r3, #15
 8001bf0:	4938      	ldr	r1, [pc, #224]	@ (8001cd4 <HAL_RCC_ClockConfig+0x360>)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <HAL_RCC_ClockConfig+0x360>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e05d      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d208      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c26:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4927      	ldr	r1, [pc, #156]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d209      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	491a      	ldr	r1, [pc, #104]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d209      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	490e      	ldr	r1, [pc, #56]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c9c:	f000 f822 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490b      	ldr	r1, [pc, #44]	@ (8001cd8 <HAL_RCC_ClockConfig+0x364>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x368>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x36c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fea8 	bl	8000a10 <HAL_InitTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	44020c00 	.word	0x44020c00
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	080038f8 	.word	0x080038f8
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001cea:	4b8c      	ldr	r3, [pc, #560]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0318 	and.w	r3, r3, #24
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001cf6:	4b8a      	ldr	r3, [pc, #552]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e107      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfc:	4b87      	ldr	r3, [pc, #540]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 0318 	and.w	r3, r3, #24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001d08:	4b84      	ldr	r3, [pc, #528]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d14:	4b81      	ldr	r3, [pc, #516]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	4a81      	ldr	r2, [pc, #516]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e0f1      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001d28:	4b7e      	ldr	r3, [pc, #504]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	e0ee      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 0318 	and.w	r3, r3, #24
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x244>)
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e0e5      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d40:	4b76      	ldr	r3, [pc, #472]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f003 0318 	and.w	r3, r3, #24
 8001d48:	2b18      	cmp	r3, #24
 8001d4a:	f040 80dd 	bne.w	8001f08 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001d4e:	4b73      	ldr	r3, [pc, #460]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001d58:	4b70      	ldr	r3, [pc, #448]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001d64:	4b6d      	ldr	r3, [pc, #436]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d70:	4b6a      	ldr	r3, [pc, #424]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80b7 	beq.w	8001f02 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d056      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x16a>
 8001da0:	e077      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001da2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d02d      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001dae:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	4a5a      	ldr	r2, [pc, #360]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd8:	4b50      	ldr	r3, [pc, #320]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dec:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8001f2c <HAL_RCC_GetSysClockFreq+0x248>
 8001df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001e08:	e065      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e14:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001f30 <HAL_RCC_GetSysClockFreq+0x24c>
 8001e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e30:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8001f2c <HAL_RCC_GetSysClockFreq+0x248>
 8001e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001e4c:	e043      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e58:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001f34 <HAL_RCC_GetSysClockFreq+0x250>
 8001e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e70:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e74:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8001f2c <HAL_RCC_GetSysClockFreq+0x248>
 8001e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001e90:	e021      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001f38 <HAL_RCC_GetSysClockFreq+0x254>
 8001ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8001f2c <HAL_RCC_GetSysClockFreq+0x248>
 8001ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ec4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001ed4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	0a5b      	lsrs	r3, r3, #9
 8001edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efa:	ee17 3a90 	vmov	r3, s15
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e001      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f0a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	44020c00 	.word	0x44020c00
 8001f20:	003d0900 	.word	0x003d0900
 8001f24:	03d09000 	.word	0x03d09000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	46000000 	.word	0x46000000
 8001f30:	4c742400 	.word	0x4c742400
 8001f34:	4af42400 	.word	0x4af42400
 8001f38:	4a742400 	.word	0x4a742400

08001f3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f40:	f7ff fed0 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001f4a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f4e:	4907      	ldr	r1, [pc, #28]	@ (8001f6c <HAL_RCC_GetHCLKFreq+0x30>)
 8001f50:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001f52:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f60:	681b      	ldr	r3, [r3, #0]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	44020c00 	.word	0x44020c00
 8001f6c:	080038f8 	.word	0x080038f8
 8001f70:	20000000 	.word	0x20000000

08001f74 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b096      	sub	sp, #88	@ 0x58
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3303      	adds	r3, #3
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8001f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8001f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8001f96:	b672      	cpsid	i
#endif
    return(int_posture);
 8001f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8001f9a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8001f9c:	4b55      	ldr	r3, [pc, #340]	@ (80020f4 <_tx_byte_allocate+0x180>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001faa:	621a      	str	r2, [r3, #32]
 8001fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f383 8810 	msr	PRIMASK, r3
}
 8001fb6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f9b2 	bl	8002324 <_tx_byte_pool_search>
 8001fc0:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8001fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8001fcc:	b672      	cpsid	i
    return(int_posture);
 8001fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8001fd0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fdc:	e006      	b.n	8001fec <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d101      	bne.n	8001fec <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8001fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0d9      	beq.n	8001fa6 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8001ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <_tx_byte_allocate+0x9c>
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002000:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f383 8810 	msr	PRIMASK, r3
}
 8002008:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800200a:	2300      	movs	r3, #0
 800200c:	653b      	str	r3, [r7, #80]	@ 0x50
 800200e:	e06c      	b.n	80020ea <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d061      	beq.n	80020da <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8002016:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <_tx_byte_allocate+0x184>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800201e:	2310      	movs	r3, #16
 8002020:	653b      	str	r3, [r7, #80]	@ 0x50
 8002022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002024:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f383 8810 	msr	PRIMASK, r3
}
 800202c:	e05d      	b.n	80020ea <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800202e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002030:	4a32      	ldr	r2, [pc, #200]	@ (80020fc <_tx_byte_allocate+0x188>)
 8002032:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8002034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8002040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8002046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002048:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002050:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8002064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800206e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8002070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002074:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8002076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800207a:	675a      	str	r2, [r3, #116]	@ 0x74
 800207c:	e011      	b.n	80020a2 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8002084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002088:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800208a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002092:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002094:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8002096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800209a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800209c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020a0:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80020a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020a4:	2209      	movs	r2, #9
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80020a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020aa:	2201      	movs	r2, #1
 80020ac:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80020ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80020b4:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_tx_byte_allocate+0x184>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a0f      	ldr	r2, [pc, #60]	@ (80020f8 <_tx_byte_allocate+0x184>)
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f383 8810 	msr	PRIMASK, r3
}
 80020c8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80020ca:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020cc:	f000 fdde 	bl	8002c8c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80020d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80020d8:	e007      	b.n	80020ea <_tx_byte_allocate+0x176>
 80020da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f383 8810 	msr	PRIMASK, r3
}
 80020e4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80020e6:	2310      	movs	r3, #16
 80020e8:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80020ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3758      	adds	r7, #88	@ 0x58
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000814c 	.word	0x2000814c
 80020f8:	200081e4 	.word	0x200081e4
 80020fc:	08002101 	.word	0x08002101

08002100 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	@ 0x38
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800210a:	f3ef 8310 	mrs	r3, PRIMASK
 800210e:	623b      	str	r3, [r7, #32]
    return(posture);
 8002110:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8002112:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002114:	b672      	cpsid	i
    return(int_posture);
 8002116:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800211e:	4a33      	ldr	r2, [pc, #204]	@ (80021ec <_tx_byte_pool_cleanup+0xec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d158      	bne.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d152      	bne.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	2b00      	cmp	r3, #0
 800213a:	d04c      	beq.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <_tx_byte_pool_cleanup+0xf0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d147      	bne.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8002146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d043      	beq.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8002154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	1e5a      	subs	r2, r3, #1
 800215a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800216a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002170:	e013      	b.n	800219a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002176:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002182:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002188:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d102      	bne.n	800219a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8002194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	2b09      	cmp	r3, #9
 80021a0:	d119      	bne.n	80021d6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2210      	movs	r2, #16
 80021a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80021aa:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <_tx_byte_pool_cleanup+0xf4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <_tx_byte_pool_cleanup+0xf4>)
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fc63 	bl	8002a8c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80021c6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ca:	61bb      	str	r3, [r7, #24]
    return(posture);
 80021cc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80021ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80021d0:	b672      	cpsid	i
    return(int_posture);
 80021d2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80021d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80021d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f383 8810 	msr	PRIMASK, r3
}
 80021e0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80021e2:	bf00      	nop
 80021e4:	3738      	adds	r7, #56	@ 0x38
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	08002101 	.word	0x08002101
 80021f0:	42595445 	.word	0x42595445
 80021f4:	200081e4 	.word	0x200081e4

080021f8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8002206:	2234      	movs	r2, #52	@ 0x34
 8002208:	2100      	movs	r1, #0
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f001 fb20 	bl	8003850 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1a3 0208 	sub.w	r2, r3, #8
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2202      	movs	r2, #2
 8002244:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800224a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4413      	add	r3, r2
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	3b04      	subs	r3, #4
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002264:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	3b04      	subs	r3, #4
 800226a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002280:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002282:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228a:	3304      	adds	r3, #4
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002294:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <_tx_byte_pool_create+0x11c>)
 8002296:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800229e:	f3ef 8310 	mrs	r3, PRIMASK
 80022a2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80022a4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80022a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80022a8:	b672      	cpsid	i
    return(int_posture);
 80022aa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <_tx_byte_pool_create+0x120>)
 80022b2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <_tx_byte_pool_create+0x124>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <_tx_byte_pool_create+0x128>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ce:	e011      	b.n	80022f4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <_tx_byte_pool_create+0x128>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a3a      	ldr	r2, [r7, #32]
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <_tx_byte_pool_create+0x124>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <_tx_byte_pool_create+0x124>)
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3738      	adds	r7, #56	@ 0x38
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffffeeee 	.word	0xffffeeee
 8002318:	42595445 	.word	0x42595445
 800231c:	20008140 	.word	0x20008140
 8002320:	2000813c 	.word	0x2000813c

08002324 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8002324:	b480      	push	{r7}
 8002326:	b097      	sub	sp, #92	@ 0x5c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800232e:	2300      	movs	r3, #0
 8002330:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800233a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800233c:	b672      	cpsid	i
    return(int_posture);
 800233e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8002340:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	3b02      	subs	r3, #2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002356:	429a      	cmp	r2, r3
 8002358:	d308      	bcc.n	800236c <_tx_byte_pool_search+0x48>
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f383 8810 	msr	PRIMASK, r3
}
 8002364:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	653b      	str	r3, [r7, #80]	@ 0x50
 800236a:	e0dd      	b.n	8002528 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800236c:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <_tx_byte_pool_search+0x214>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002376:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	3301      	adds	r3, #1
 8002384:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8002386:	2300      	movs	r3, #0
 8002388:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800238a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238c:	3304      	adds	r3, #4
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	@ (800253c <_tx_byte_pool_search+0x218>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d143      	bne.n	8002426 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800239e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80023a8:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80023ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80023b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80023c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023c2:	3b08      	subs	r3, #8
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80023c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d257      	bcs.n	800247e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80023ce:	2300      	movs	r3, #0
 80023d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	3304      	adds	r3, #4
 80023d6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80023d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80023dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a56      	ldr	r2, [pc, #344]	@ (800253c <_tx_byte_pool_search+0x218>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d113      	bne.n	800240e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80023ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002402:	429a      	cmp	r2, r3
 8002404:	d114      	bne.n	8002430 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	e010      	b.n	8002430 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8002418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800241e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002420:	3b01      	subs	r3, #1
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002424:	e004      	b.n	8002430 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8002430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8002436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002438:	3b01      	subs	r3, #1
 800243a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800243c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f383 8810 	msr	PRIMASK, r3
}
 8002446:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002448:	f3ef 8310 	mrs	r3, PRIMASK
 800244c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800244e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002452:	b672      	cpsid	i
    return(int_posture);
 8002454:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8002456:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800245e:	429a      	cmp	r2, r3
 8002460:	d009      	beq.n	8002476 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	3301      	adds	r3, #1
 800246e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002474:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8002476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002478:	2b00      	cmp	r3, #0
 800247a:	d186      	bne.n	800238a <_tx_byte_pool_search+0x66>
 800247c:	e000      	b.n	8002480 <_tx_byte_pool_search+0x15c>
                    break;
 800247e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8002480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d048      	beq.n	8002518 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8002486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b13      	cmp	r3, #19
 800248e:	d91e      	bls.n	80024ce <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3308      	adds	r3, #8
 8002494:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002496:	4413      	add	r3, r2
 8002498:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800249e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a0:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80024a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80024aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ac:	3304      	adds	r3, #4
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b6:	4a21      	ldr	r2, [pc, #132]	@ (800253c <_tx_byte_pool_search+0x218>)
 80024b8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024c8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80024ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024d0:	3304      	adds	r3, #4
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80024d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d6:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f1a3 0208 	sub.w	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d105      	bne.n	8002504 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80024f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002506:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f383 8810 	msr	PRIMASK, r3
}
 800250e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002512:	3308      	adds	r3, #8
 8002514:	653b      	str	r3, [r7, #80]	@ 0x50
 8002516:	e007      	b.n	8002528 <_tx_byte_pool_search+0x204>
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f383 8810 	msr	PRIMASK, r3
}
 8002522:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8002528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800252a:	4618      	mov	r0, r3
 800252c:	375c      	adds	r7, #92	@ 0x5c
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2000814c 	.word	0x2000814c
 800253c:	ffffeeee 	.word	0xffffeeee

08002540 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8002544:	f000 f960 	bl	8002808 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8002548:	f000 fd68 	bl	800301c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <_tx_initialize_high_level+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <_tx_initialize_high_level+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <_tx_initialize_high_level+0x60>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <_tx_initialize_high_level+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <_tx_initialize_high_level+0x68>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <_tx_initialize_high_level+0x6c>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <_tx_initialize_high_level+0x70>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <_tx_initialize_high_level+0x74>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <_tx_initialize_high_level+0x78>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <_tx_initialize_high_level+0x7c>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8002588:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <_tx_initialize_high_level+0x80>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <_tx_initialize_high_level+0x84>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
#endif
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20008114 	.word	0x20008114
 800259c:	20008118 	.word	0x20008118
 80025a0:	2000811c 	.word	0x2000811c
 80025a4:	20008120 	.word	0x20008120
 80025a8:	20008124 	.word	0x20008124
 80025ac:	20008128 	.word	0x20008128
 80025b0:	20008134 	.word	0x20008134
 80025b4:	20008138 	.word	0x20008138
 80025b8:	2000813c 	.word	0x2000813c
 80025bc:	20008140 	.word	0x20008140
 80025c0:	2000812c 	.word	0x2000812c
 80025c4:	20008130 	.word	0x20008130

080025c8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <_tx_initialize_kernel_enter+0x48>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 80025d4:	d00c      	beq.n	80025f0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <_tx_initialize_kernel_enter+0x48>)
 80025d8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80025dc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80025de:	f7fd fe55 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80025e2:	f7ff ffad 	bl	8002540 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <_tx_initialize_kernel_enter+0x4c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <_tx_initialize_kernel_enter+0x4c>)
 80025ee:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80025f0:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <_tx_initialize_kernel_enter+0x48>)
 80025f2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80025f6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80025f8:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <_tx_initialize_kernel_enter+0x50>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff63 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002602:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <_tx_initialize_kernel_enter+0x48>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8002608:	f7fd fe7c 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000000c 	.word	0x2000000c
 8002614:	200081e4 	.word	0x200081e4
 8002618:	20008144 	.word	0x20008144

0800261c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b092      	sub	sp, #72	@ 0x48
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800262a:	2300      	movs	r3, #0
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800262e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002630:	21ef      	movs	r1, #239	@ 0xef
 8002632:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002634:	f001 f90c 	bl	8003850 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8002638:	22b0      	movs	r2, #176	@ 0xb0
 800263a:	2100      	movs	r1, #0
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f001 f907 	bl	8003850 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002658:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800265e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002664:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800266a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002672:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002678:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8002682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002684:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8002686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002688:	3b01      	subs	r3, #1
 800268a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800268c:	4413      	add	r3, r2
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002694:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8002696:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269a:	429a      	cmp	r2, r3
 800269c:	d007      	beq.n	80026ae <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80026ac:	e006      	b.n	80026bc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2203      	movs	r2, #3
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4a48      	ldr	r2, [pc, #288]	@ (80027e8 <_tx_thread_create+0x1cc>)
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80026ce:	4947      	ldr	r1, [pc, #284]	@ (80027ec <_tx_thread_create+0x1d0>)
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7fd fe7d 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80026dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80026e0:	b672      	cpsid	i
    return(int_posture);
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a41      	ldr	r2, [pc, #260]	@ (80027f0 <_tx_thread_create+0x1d4>)
 80026ea:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80026ec:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <_tx_thread_create+0x1d8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80026f4:	4a40      	ldr	r2, [pc, #256]	@ (80027f8 <_tx_thread_create+0x1dc>)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800270a:	e016      	b.n	800273a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800270c:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <_tx_thread_create+0x1dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8002722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800272e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800273a:	4b2e      	ldr	r3, [pc, #184]	@ (80027f4 <_tx_thread_create+0x1d8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	4a2c      	ldr	r2, [pc, #176]	@ (80027f4 <_tx_thread_create+0x1d8>)
 8002742:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002744:	4b2d      	ldr	r3, [pc, #180]	@ (80027fc <_tx_thread_create+0x1e0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a2c      	ldr	r2, [pc, #176]	@ (80027fc <_tx_thread_create+0x1e0>)
 800274c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800274e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002750:	2b01      	cmp	r3, #1
 8002752:	d129      	bne.n	80027a8 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002754:	f3ef 8305 	mrs	r3, IPSR
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800275a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800275c:	4b28      	ldr	r3, [pc, #160]	@ (8002800 <_tx_thread_create+0x1e4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8002766:	d30d      	bcc.n	8002784 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <_tx_thread_create+0x1e8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800276e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800277a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800277e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002780:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002782:	e001      	b.n	8002788 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	647b      	str	r3, [r7, #68]	@ 0x44
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f383 8810 	msr	PRIMASK, r3
}
 8002792:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f979 	bl	8002a8c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800279a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01e      	beq.n	80027de <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80027a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a6:	e01a      	b.n	80027de <_tx_thread_create+0x1c2>
 80027a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80027b4:	f3ef 8310 	mrs	r3, PRIMASK
 80027b8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80027ba:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80027bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80027be:	b672      	cpsid	i
    return(int_posture);
 80027c0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80027c2:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <_tx_thread_create+0x1e0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	4a0c      	ldr	r2, [pc, #48]	@ (80027fc <_tx_thread_create+0x1e0>)
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f383 8810 	msr	PRIMASK, r3
}
 80027d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80027da:	f000 f91d 	bl	8002a18 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3748      	adds	r7, #72	@ 0x48
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08002f61 	.word	0x08002f61
 80027ec:	08002881 	.word	0x08002881
 80027f0:	54485244 	.word	0x54485244
 80027f4:	20008158 	.word	0x20008158
 80027f8:	20008154 	.word	0x20008154
 80027fc:	200081e4 	.word	0x200081e4
 8002800:	2000000c 	.word	0x2000000c
 8002804:	20008150 	.word	0x20008150

08002808 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <_tx_thread_initialize+0x50>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <_tx_thread_initialize+0x54>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <_tx_thread_initialize+0x58>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <_tx_thread_initialize+0x5c>)
 8002820:	2220      	movs	r2, #32
 8002822:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	2100      	movs	r1, #0
 8002828:	480f      	ldr	r0, [pc, #60]	@ (8002868 <_tx_thread_initialize+0x60>)
 800282a:	f001 f811 	bl	8003850 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800282e:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <_tx_thread_initialize+0x64>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <_tx_thread_initialize+0x68>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <_tx_thread_initialize+0x6c>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002840:	4b0d      	ldr	r3, [pc, #52]	@ (8002878 <_tx_thread_initialize+0x70>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8002846:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <_tx_thread_initialize+0x74>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800284e:	4a0b      	ldr	r2, [pc, #44]	@ (800287c <_tx_thread_initialize+0x74>)
 8002850:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000814c 	.word	0x2000814c
 800285c:	20008150 	.word	0x20008150
 8002860:	2000815c 	.word	0x2000815c
 8002864:	20008160 	.word	0x20008160
 8002868:	20008164 	.word	0x20008164
 800286c:	20008154 	.word	0x20008154
 8002870:	20008158 	.word	0x20008158
 8002874:	200081e4 	.word	0x200081e4
 8002878:	200081e8 	.word	0x200081e8
 800287c:	200081ec 	.word	0x200081ec

08002880 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <_tx_thread_shell_entry+0x8c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002894:	4610      	mov	r0, r2
 8002896:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002898:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <_tx_thread_shell_entry+0x90>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <_tx_thread_shell_entry+0x90>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69f8      	ldr	r0, [r7, #28]
 80028a6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80028a8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ac:	607b      	str	r3, [r7, #4]
    return(posture);
 80028ae:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80028b0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80028b2:	b672      	cpsid	i
    return(int_posture);
 80028b4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80028b6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2201      	movs	r2, #1
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2201      	movs	r2, #1
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2200      	movs	r2, #0
 80028c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <_tx_thread_shell_entry+0x94>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <_tx_thread_shell_entry+0x94>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80028e0:	f3ef 8314 	mrs	r3, CONTROL
 80028e4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80028e6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f383 8814 	msr	CONTROL, r3
}
 80028fc:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80028fe:	69f8      	ldr	r0, [r7, #28]
 8002900:	f000 f9c4 	bl	8002c8c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000814c 	.word	0x2000814c
 8002910:	200081e8 	.word	0x200081e8
 8002914:	200081e4 	.word	0x200081e4

08002918 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08e      	sub	sp, #56	@ 0x38
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002920:	f3ef 8310 	mrs	r3, PRIMASK
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800292a:	b672      	cpsid	i
    return(int_posture);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800292e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002930:	4b35      	ldr	r3, [pc, #212]	@ (8002a08 <_tx_thread_sleep+0xf0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <_tx_thread_sleep+0x36>
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	f383 8810 	msr	PRIMASK, r3
}
 8002946:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002948:	2313      	movs	r3, #19
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	e056      	b.n	80029fc <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800294e:	f3ef 8305 	mrs	r3, IPSR
 8002952:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002954:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <_tx_thread_sleep+0xf4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <_tx_thread_sleep+0x5a>
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800296c:	2313      	movs	r3, #19
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	e044      	b.n	80029fc <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	4a26      	ldr	r2, [pc, #152]	@ (8002a10 <_tx_thread_sleep+0xf8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <_tx_thread_sleep+0x74>
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f383 8810 	msr	PRIMASK, r3
}
 8002984:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002986:	2313      	movs	r3, #19
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
 800298a:	e037      	b.n	80029fc <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <_tx_thread_sleep+0x8c>
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f383 8810 	msr	PRIMASK, r3
}
 800299c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800299e:	2300      	movs	r3, #0
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a2:	e02b      	b.n	80029fc <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <_tx_thread_sleep+0xfc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <_tx_thread_sleep+0xa6>
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80029b8:	2313      	movs	r3, #19
 80029ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80029bc:	e01e      	b.n	80029fc <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	2204      	movs	r2, #4
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	2201      	movs	r2, #1
 80029c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80029ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80029d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <_tx_thread_sleep+0xfc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <_tx_thread_sleep+0xfc>)
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80029ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029f0:	f000 f94c 	bl	8002c8c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80029f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80029fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3738      	adds	r7, #56	@ 0x38
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000814c 	.word	0x2000814c
 8002a0c:	2000000c 	.word	0x2000000c
 8002a10:	20008294 	.word	0x20008294
 8002a14:	200081e4 	.word	0x200081e4

08002a18 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <_tx_thread_system_preempt_check+0x64>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d121      	bne.n	8002a6e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <_tx_thread_system_preempt_check+0x68>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8002a30:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <_tx_thread_system_preempt_check+0x6c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d017      	beq.n	8002a6e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002a3e:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <_tx_thread_system_preempt_check+0x70>)
 8002a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a44:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002a46:	f3ef 8305 	mrs	r3, IPSR
 8002a4a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8002a4c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a52:	f3ef 8310 	mrs	r3, PRIMASK
 8002a56:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002a58:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8002a5a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002a5c:	b662      	cpsie	i
}
 8002a5e:	bf00      	nop
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8002a6c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200081e4 	.word	0x200081e4
 8002a80:	2000814c 	.word	0x2000814c
 8002a84:	20008150 	.word	0x20008150
 8002a88:	e000ed04 	.word	0xe000ed04

08002a8c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b096      	sub	sp, #88	@ 0x58
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a94:	f3ef 8310 	mrs	r3, PRIMASK
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8002a9c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a9e:	b672      	cpsid	i
    return(int_posture);
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002aa2:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	334c      	adds	r3, #76	@ 0x4c
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fb91 	bl	80031d8 <_tx_timer_system_deactivate>
 8002ab6:	e002      	b.n	8002abe <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002abe:	4b6c      	ldr	r3, [pc, #432]	@ (8002c70 <_tx_thread_system_resume+0x1e4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c70 <_tx_thread_system_resume+0x1e4>)
 8002ac6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 8083 	bne.w	8002bd8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8097 	beq.w	8002c0a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d172      	bne.n	8002bca <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8002af0:	4a60      	ldr	r2, [pc, #384]	@ (8002c74 <_tx_thread_system_resume+0x1e8>)
 8002af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8002afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d154      	bne.n	8002baa <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8002b00:	495c      	ldr	r1, [pc, #368]	@ (8002c74 <_tx_thread_system_resume+0x1e8>)
 8002b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002b16:	2201      	movs	r2, #1
 8002b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8002b20:	4b55      	ldr	r3, [pc, #340]	@ (8002c78 <_tx_thread_system_resume+0x1ec>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a53      	ldr	r2, [pc, #332]	@ (8002c78 <_tx_thread_system_resume+0x1ec>)
 8002b2a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8002b2c:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <_tx_thread_system_resume+0x1f0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d269      	bcs.n	8002c0a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8002b36:	4a51      	ldr	r2, [pc, #324]	@ (8002c7c <_tx_thread_system_resume+0x1f0>)
 8002b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <_tx_thread_system_resume+0x1f4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8002b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8002b48:	4a4d      	ldr	r2, [pc, #308]	@ (8002c80 <_tx_thread_system_resume+0x1f4>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e05c      	b.n	8002c0a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8002b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d257      	bcs.n	8002c0a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8002b5a:	4a49      	ldr	r2, [pc, #292]	@ (8002c80 <_tx_thread_system_resume+0x1f4>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002b6c:	4b40      	ldr	r3, [pc, #256]	@ (8002c70 <_tx_thread_system_resume+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8002b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d174      	bne.n	8002c62 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002b78:	4b42      	ldr	r3, [pc, #264]	@ (8002c84 <_tx_thread_system_resume+0x1f8>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002b80:	f3ef 8305 	mrs	r3, IPSR
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8002b94:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002b96:	b662      	cpsie	i
}
 8002b98:	bf00      	nop
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	bf00      	nop
}
 8002ba6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8002ba8:	e05b      	b.n	8002c62 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8002baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8002bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bc6:	621a      	str	r2, [r3, #32]
 8002bc8:	e01f      	b.n	8002c0a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd6:	e018      	b.n	8002c0a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d014      	beq.n	8002c0a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d010      	beq.n	8002c0a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfc:	e005      	b.n	8002c0a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2203      	movs	r2, #3
 8002c08:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <_tx_thread_system_resume+0x1fc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c12:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <_tx_thread_system_resume+0x1f4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d020      	beq.n	8002c68 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <_tx_thread_system_resume+0x1e4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11a      	bne.n	8002c68 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <_tx_thread_system_resume+0x1f8>)
 8002c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002c3a:	f3ef 8305 	mrs	r3, IPSR
 8002c3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8002c40:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c46:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4a:	613b      	str	r3, [r7, #16]
    return(posture);
 8002c4c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8002c4e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002c50:	b662      	cpsie	i
}
 8002c52:	bf00      	nop
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f383 8810 	msr	PRIMASK, r3
}
 8002c5e:	bf00      	nop
}
 8002c60:	e001      	b.n	8002c66 <_tx_thread_system_resume+0x1da>
                                return;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <_tx_thread_system_resume+0x1dc>
 8002c66:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8002c68:	3758      	adds	r7, #88	@ 0x58
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200081e4 	.word	0x200081e4
 8002c74:	20008164 	.word	0x20008164
 8002c78:	2000815c 	.word	0x2000815c
 8002c7c:	20008160 	.word	0x20008160
 8002c80:	20008150 	.word	0x20008150
 8002c84:	e000ed04 	.word	0xe000ed04
 8002c88:	2000814c 	.word	0x2000814c

08002c8c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b09e      	sub	sp, #120	@ 0x78
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002c94:	4b81      	ldr	r3, [pc, #516]	@ (8002e9c <_tx_thread_system_suspend+0x210>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8002ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ca4:	b672      	cpsid	i
    return(int_posture);
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8002ca8:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d112      	bne.n	8002cd8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8002cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8002cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d004      	beq.n	8002cd0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	334c      	adds	r3, #76	@ 0x4c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fa22 	bl	8003114 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	4a72      	ldr	r2, [pc, #456]	@ (8002ea0 <_tx_thread_system_suspend+0x214>)
 8002cd6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002cd8:	4b72      	ldr	r3, [pc, #456]	@ (8002ea4 <_tx_thread_system_suspend+0x218>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	4a71      	ldr	r2, [pc, #452]	@ (8002ea4 <_tx_thread_system_suspend+0x218>)
 8002ce0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f040 80a6 	bne.w	8002e38 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8002cfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d015      	beq.n	8002d32 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8002d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8002d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d16:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <_tx_thread_system_suspend+0x21c>)
 8002d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d157      	bne.n	8002dd6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8002d26:	4960      	ldr	r1, [pc, #384]	@ (8002ea8 <_tx_thread_system_suspend+0x21c>)
 8002d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002d30:	e051      	b.n	8002dd6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8002d32:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea8 <_tx_thread_system_suspend+0x21c>)
 8002d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d36:	2100      	movs	r1, #0
 8002d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8002d46:	4b59      	ldr	r3, [pc, #356]	@ (8002eac <_tx_thread_system_suspend+0x220>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	4a56      	ldr	r2, [pc, #344]	@ (8002eac <_tx_thread_system_suspend+0x220>)
 8002d52:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8002d54:	2300      	movs	r3, #0
 8002d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8002d58:	4b54      	ldr	r3, [pc, #336]	@ (8002eac <_tx_thread_system_suspend+0x220>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002d64:	4b52      	ldr	r3, [pc, #328]	@ (8002eb0 <_tx_thread_system_suspend+0x224>)
 8002d66:	2220      	movs	r2, #32
 8002d68:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8002d6a:	4b52      	ldr	r3, [pc, #328]	@ (8002eb4 <_tx_thread_system_suspend+0x228>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002d7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ea4 <_tx_thread_system_suspend+0x218>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8081 	bne.w	8002e8c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb8 <_tx_thread_system_suspend+0x22c>)
 8002d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d90:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002d92:	f3ef 8305 	mrs	r3, IPSR
 8002d96:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8002d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8002da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	bf00      	nop
 8002dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	bf00      	nop
}
 8002db8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8002dba:	e067      	b.n	8002e8c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8002dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8002dcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a37      	ldr	r2, [pc, #220]	@ (8002eb0 <_tx_thread_system_suspend+0x224>)
 8002dd4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8002dd6:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <_tx_thread_system_suspend+0x228>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d12b      	bne.n	8002e38 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002de0:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <_tx_thread_system_suspend+0x224>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a30      	ldr	r2, [pc, #192]	@ (8002ea8 <_tx_thread_system_suspend+0x21c>)
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	4a32      	ldr	r2, [pc, #200]	@ (8002eb4 <_tx_thread_system_suspend+0x228>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002df0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <_tx_thread_system_suspend+0x218>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d144      	bne.n	8002e90 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002e06:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb8 <_tx_thread_system_suspend+0x22c>)
 8002e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002e0e:	f3ef 8305 	mrs	r3, IPSR
 8002e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10c      	bne.n	8002e34 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002e24:	b662      	cpsie	i
}
 8002e26:	bf00      	nop
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f383 8810 	msr	PRIMASK, r3
}
 8002e32:	bf00      	nop
}
 8002e34:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8002e36:	e02b      	b.n	8002e90 <_tx_thread_system_suspend+0x204>
 8002e38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f383 8810 	msr	PRIMASK, r3
}
 8002e42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <_tx_thread_system_suspend+0x228>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d022      	beq.n	8002e94 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <_tx_thread_system_suspend+0x218>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11c      	bne.n	8002e94 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <_tx_thread_system_suspend+0x22c>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002e62:	f3ef 8305 	mrs	r3, IPSR
 8002e66:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8002e68:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e72:	617b      	str	r3, [r7, #20]
    return(posture);
 8002e74:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8002e76:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002e78:	b662      	cpsie	i
}
 8002e7a:	bf00      	nop
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	bf00      	nop
}
 8002e88:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8002e8a:	e003      	b.n	8002e94 <_tx_thread_system_suspend+0x208>
                return;
 8002e8c:	bf00      	nop
 8002e8e:	e002      	b.n	8002e96 <_tx_thread_system_suspend+0x20a>
            return;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <_tx_thread_system_suspend+0x20a>
    return;
 8002e94:	bf00      	nop
}
 8002e96:	3778      	adds	r7, #120	@ 0x78
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2000814c 	.word	0x2000814c
 8002ea0:	20008750 	.word	0x20008750
 8002ea4:	200081e4 	.word	0x200081e4
 8002ea8:	20008164 	.word	0x20008164
 8002eac:	2000815c 	.word	0x2000815c
 8002eb0:	20008160 	.word	0x20008160
 8002eb4:	20008150 	.word	0x20008150
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <_tx_thread_time_slice+0x8c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ecc:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002ece:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8002ed0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ed2:	b672      	cpsid	i
    return(int_posture);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8002ed6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <_tx_thread_time_slice+0x90>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d024      	beq.n	8002f2e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d120      	bne.n	8002f2e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	@ (8002f50 <_tx_thread_time_slice+0x94>)
 8002efa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d013      	beq.n	8002f2e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d10d      	bne.n	8002f2e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	6a12      	ldr	r2, [r2, #32]
 8002f1a:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <_tx_thread_time_slice+0x98>)
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <_tx_thread_time_slice+0x9c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	@ (8002f54 <_tx_thread_time_slice+0x98>)
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <_tx_thread_time_slice+0xa0>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000814c 	.word	0x2000814c
 8002f4c:	200081f4 	.word	0x200081f4
 8002f50:	20008750 	.word	0x20008750
 8002f54:	20008164 	.word	0x20008164
 8002f58:	20008160 	.word	0x20008160
 8002f5c:	20008150 	.word	0x20008150

08002f60 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f70:	617b      	str	r3, [r7, #20]
    return(posture);
 8002f72:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8002f74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002f76:	b672      	cpsid	i
    return(int_posture);
 8002f78:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8002f7a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d10e      	bne.n	8002fa2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <_tx_thread_timeout+0x74>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <_tx_thread_timeout+0x74>)
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8002f9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f9c:	f7ff fd76 	bl	8002a8c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8002fa0:	e013      	b.n	8002fca <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f383 8810 	msr	PRIMASK, r3
}
 8002fba:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fc8:	4798      	blx	r3
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200081e4 	.word	0x200081e4

08002fd8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	607b      	str	r3, [r7, #4]
    return(posture);
 8002fe4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002fe6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002fe8:	b672      	cpsid	i
    return(int_posture);
 8002fea:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8002fec:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <_tx_timer_expiration_process+0x3c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <_tx_timer_expiration_process+0x3c>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003004:	4804      	ldr	r0, [pc, #16]	@ (8003018 <_tx_timer_expiration_process+0x40>)
 8003006:	f7ff fd41 	bl	8002a8c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200081e4 	.word	0x200081e4
 8003018:	20008294 	.word	0x20008294

0800301c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003022:	4b28      	ldr	r3, [pc, #160]	@ (80030c4 <_tx_timer_initialize+0xa8>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003028:	4b27      	ldr	r3, [pc, #156]	@ (80030c8 <_tx_timer_initialize+0xac>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800302e:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <_tx_timer_initialize+0xb0>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003034:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <_tx_timer_initialize+0xb4>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800303a:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <_tx_timer_initialize+0xb8>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003040:	2280      	movs	r2, #128	@ 0x80
 8003042:	2100      	movs	r1, #0
 8003044:	4824      	ldr	r0, [pc, #144]	@ (80030d8 <_tx_timer_initialize+0xbc>)
 8003046:	f000 fc03 	bl	8003850 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <_tx_timer_initialize+0xc0>)
 800304c:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <_tx_timer_initialize+0xbc>)
 800304e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003050:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <_tx_timer_initialize+0xc4>)
 8003052:	4a21      	ldr	r2, [pc, #132]	@ (80030d8 <_tx_timer_initialize+0xbc>)
 8003054:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8003056:	4b23      	ldr	r3, [pc, #140]	@ (80030e4 <_tx_timer_initialize+0xc8>)
 8003058:	4a23      	ldr	r2, [pc, #140]	@ (80030e8 <_tx_timer_initialize+0xcc>)
 800305a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800305c:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <_tx_timer_initialize+0xc8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3304      	adds	r3, #4
 8003062:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <_tx_timer_initialize+0xc8>)
 8003064:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8003066:	4b21      	ldr	r3, [pc, #132]	@ (80030ec <_tx_timer_initialize+0xd0>)
 8003068:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <_tx_timer_initialize+0xd4>)
 800306a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800306c:	4b21      	ldr	r3, [pc, #132]	@ (80030f4 <_tx_timer_initialize+0xd8>)
 800306e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003072:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8003074:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <_tx_timer_initialize+0xdc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800307a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <_tx_timer_initialize+0xd0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <_tx_timer_initialize+0xd8>)
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	491d      	ldr	r1, [pc, #116]	@ (80030f8 <_tx_timer_initialize+0xdc>)
 8003084:	6809      	ldr	r1, [r1, #0]
 8003086:	481c      	ldr	r0, [pc, #112]	@ (80030f8 <_tx_timer_initialize+0xdc>)
 8003088:	6800      	ldr	r0, [r0, #0]
 800308a:	2400      	movs	r4, #0
 800308c:	9405      	str	r4, [sp, #20]
 800308e:	2400      	movs	r4, #0
 8003090:	9404      	str	r4, [sp, #16]
 8003092:	9003      	str	r0, [sp, #12]
 8003094:	9102      	str	r1, [sp, #8]
 8003096:	9201      	str	r2, [sp, #4]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <_tx_timer_initialize+0xe0>)
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <_tx_timer_initialize+0xe4>)
 800309e:	4919      	ldr	r1, [pc, #100]	@ (8003104 <_tx_timer_initialize+0xe8>)
 80030a0:	4819      	ldr	r0, [pc, #100]	@ (8003108 <_tx_timer_initialize+0xec>)
 80030a2:	f7ff fabb 	bl	800261c <_tx_thread_create>
 80030a6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e5      	bne.n	800307a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80030ae:	4b17      	ldr	r3, [pc, #92]	@ (800310c <_tx_timer_initialize+0xf0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <_tx_timer_initialize+0xf4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200081f0 	.word	0x200081f0
 80030c8:	20008750 	.word	0x20008750
 80030cc:	200081f4 	.word	0x200081f4
 80030d0:	20008284 	.word	0x20008284
 80030d4:	20008290 	.word	0x20008290
 80030d8:	200081f8 	.word	0x200081f8
 80030dc:	20008278 	.word	0x20008278
 80030e0:	20008280 	.word	0x20008280
 80030e4:	2000827c 	.word	0x2000827c
 80030e8:	20008274 	.word	0x20008274
 80030ec:	20008344 	.word	0x20008344
 80030f0:	20008350 	.word	0x20008350
 80030f4:	20008348 	.word	0x20008348
 80030f8:	2000834c 	.word	0x2000834c
 80030fc:	4154494d 	.word	0x4154494d
 8003100:	08003249 	.word	0x08003249
 8003104:	080038e4 	.word	0x080038e4
 8003108:	20008294 	.word	0x20008294
 800310c:	20008288 	.word	0x20008288
 8003110:	2000828c 	.word	0x2000828c

08003114 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d04a      	beq.n	80031be <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d046      	beq.n	80031be <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d142      	bne.n	80031be <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b20      	cmp	r3, #32
 800313c:	d902      	bls.n	8003144 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800313e:	231f      	movs	r3, #31
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e002      	b.n	800314a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3b01      	subs	r3, #1
 8003148:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <_tx_timer_system_activate+0xb8>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8003156:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <_tx_timer_system_activate+0xbc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d30b      	bcc.n	8003178 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <_tx_timer_system_activate+0xbc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	109b      	asrs	r3, r3, #2
 800316a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <_tx_timer_system_activate+0xc0>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e011      	b.n	80031b8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80031be:	bf00      	nop
 80031c0:	3724      	adds	r7, #36	@ 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20008280 	.word	0x20008280
 80031d0:	2000827c 	.word	0x2000827c
 80031d4:	20008278 	.word	0x20008278

080031d8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d026      	beq.n	800323a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d108      	bne.n	800320c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d117      	bne.n	8003234 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e013      	b.n	8003234 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d105      	bne.n	8003234 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	619a      	str	r2, [r3, #24]
    }
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b098      	sub	sp, #96	@ 0x60
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8003250:	2300      	movs	r3, #0
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a73      	ldr	r2, [pc, #460]	@ (8003424 <_tx_timer_thread_entry+0x1dc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	f040 80de 	bne.w	800341a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800325e:	f3ef 8310 	mrs	r3, PRIMASK
 8003262:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8003264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003268:	b672      	cpsid	i
    return(int_posture);
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800326c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800326e:	4b6e      	ldr	r3, [pc, #440]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f107 020c 	add.w	r2, r7, #12
 8003282:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8003284:	4b68      	ldr	r3, [pc, #416]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800328c:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3304      	adds	r3, #4
 8003292:	4a65      	ldr	r2, [pc, #404]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 8003294:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8003296:	4b64      	ldr	r3, [pc, #400]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b64      	ldr	r3, [pc, #400]	@ (800342c <_tx_timer_thread_entry+0x1e4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d103      	bne.n	80032aa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80032a2:	4b63      	ldr	r3, [pc, #396]	@ (8003430 <_tx_timer_thread_entry+0x1e8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a60      	ldr	r2, [pc, #384]	@ (8003428 <_tx_timer_thread_entry+0x1e0>)
 80032a8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80032aa:	4b62      	ldr	r3, [pc, #392]	@ (8003434 <_tx_timer_thread_entry+0x1ec>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	f383 8810 	msr	PRIMASK, r3
}
 80032ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80032c4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80032c6:	b672      	cpsid	i
    return(int_posture);
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80032ca:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80032cc:	e07f      	b.n	80033ce <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80032dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d102      	bne.n	80032ea <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e00e      	b.n	8003308 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80032ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80032f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032f4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80032f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032fa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fe:	f107 020c 	add.w	r2, r7, #12
 8003302:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8003304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003306:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8003308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b20      	cmp	r3, #32
 800330e:	d911      	bls.n	8003334 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8003318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800331a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800331c:	2300      	movs	r3, #0
 800331e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003322:	f107 0208 	add.w	r2, r7, #8
 8003326:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8003328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800332a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800332c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800332e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	e01a      	b.n	800336a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8003334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800333a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8003340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003346:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8003348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003352:	f107 0208 	add.w	r2, r7, #8
 8003356:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8003358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800335c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800335e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	e002      	b.n	800336a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8003364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003366:	2200      	movs	r2, #0
 8003368:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800336a:	4a33      	ldr	r2, [pc, #204]	@ (8003438 <_tx_timer_thread_entry+0x1f0>)
 800336c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800337c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8003382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003384:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003386:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003388:	f3ef 8310 	mrs	r3, PRIMASK
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003392:	b672      	cpsid	i
    return(int_posture);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003396:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <_tx_timer_thread_entry+0x1f0>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d105      	bne.n	80033b2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80033a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80033ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80033ae:	f7ff feb1 	bl	8003114 <_tx_timer_system_activate>
 80033b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	623b      	str	r3, [r7, #32]
    return(posture);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80033c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80033c8:	b672      	cpsid	i
    return(int_posture);
 80033ca:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80033cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f47f af7c 	bne.w	80032ce <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <_tx_timer_thread_entry+0x1ec>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d116      	bne.n	800340c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80033de:	4b17      	ldr	r3, [pc, #92]	@ (800343c <_tx_timer_thread_entry+0x1f4>)
 80033e0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80033e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e4:	2203      	movs	r2, #3
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80033e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ea:	2201      	movs	r2, #1
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80033ee:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <_tx_timer_thread_entry+0x1f8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <_tx_timer_thread_entry+0x1f8>)
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003404:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003406:	f7ff fc41 	bl	8002c8c <_tx_thread_system_suspend>
 800340a:	e728      	b.n	800325e <_tx_timer_thread_entry+0x16>
 800340c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	bf00      	nop
            TX_DISABLE
 8003418:	e721      	b.n	800325e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800341a:	bf00      	nop
 800341c:	3760      	adds	r7, #96	@ 0x60
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	4154494d 	.word	0x4154494d
 8003428:	20008280 	.word	0x20008280
 800342c:	2000827c 	.word	0x2000827c
 8003430:	20008278 	.word	0x20008278
 8003434:	20008284 	.word	0x20008284
 8003438:	20008290 	.word	0x20008290
 800343c:	20008294 	.word	0x20008294
 8003440:	200081e4 	.word	0x200081e4

08003444 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800345c:	2302      	movs	r3, #2
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003460:	e029      	b.n	80034b6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2d      	ldr	r2, [pc, #180]	@ (800351c <_txe_byte_allocate+0xd8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d002      	beq.n	8003472 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800346c:	2302      	movs	r3, #2
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003470:	e021      	b.n	80034b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d102      	bne.n	800347e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8003478:	2303      	movs	r3, #3
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
 800347c:	e01b      	b.n	80034b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8003484:	2305      	movs	r3, #5
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
 8003488:	e015      	b.n	80034b6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d902      	bls.n	800349a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8003494:	2305      	movs	r3, #5
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
 8003498:	e00d      	b.n	80034b6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034a0:	f3ef 8305 	mrs	r3, IPSR
 80034a4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80034a6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80034a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <_txe_byte_allocate+0xdc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80034b2:	2304      	movs	r3, #4
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d108      	bne.n	80034ce <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <_txe_byte_allocate+0xe0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <_txe_byte_allocate+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80034ca:	2313      	movs	r3, #19
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d114      	bne.n	80034fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034d4:	f3ef 8305 	mrs	r3, IPSR
 80034d8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80034da:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80034dc:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <_txe_byte_allocate+0xdc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80034e6:	f3ef 8305 	mrs	r3, IPSR
 80034ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80034ec:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80034ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <_txe_byte_allocate+0xdc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80034f8:	d201      	bcs.n	80034fe <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80034fa:	2313      	movs	r3, #19
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7fe fd32 	bl	8001f74 <_tx_byte_allocate>
 8003510:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	42595445 	.word	0x42595445
 8003520:	2000000c 	.word	0x2000000c
 8003524:	2000814c 	.word	0x2000814c
 8003528:	20008294 	.word	0x20008294

0800352c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b092      	sub	sp, #72	@ 0x48
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800353a:	2300      	movs	r3, #0
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003544:	2302      	movs	r3, #2
 8003546:	647b      	str	r3, [r7, #68]	@ 0x44
 8003548:	e075      	b.n	8003636 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800354a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354c:	2b34      	cmp	r3, #52	@ 0x34
 800354e:	d002      	beq.n	8003556 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003550:	2302      	movs	r3, #2
 8003552:	647b      	str	r3, [r7, #68]	@ 0x44
 8003554:	e06f      	b.n	8003636 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003560:	b672      	cpsid	i
    return(int_posture);
 8003562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003564:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003566:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <_txe_byte_pool_create+0x128>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a39      	ldr	r2, [pc, #228]	@ (8003654 <_txe_byte_pool_create+0x128>)
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800357c:	4b36      	ldr	r3, [pc, #216]	@ (8003658 <_txe_byte_pool_create+0x12c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	643b      	str	r3, [r7, #64]	@ 0x40
 8003586:	e009      	b.n	800359c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358c:	429a      	cmp	r2, r3
 800358e:	d00b      	beq.n	80035a8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	3301      	adds	r3, #1
 800359a:	643b      	str	r3, [r7, #64]	@ 0x40
 800359c:	4b2f      	ldr	r3, [pc, #188]	@ (800365c <_txe_byte_pool_create+0x130>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3f0      	bcc.n	8003588 <_txe_byte_pool_create+0x5c>
 80035a6:	e000      	b.n	80035aa <_txe_byte_pool_create+0x7e>
                break;
 80035a8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
 80035ae:	623b      	str	r3, [r7, #32]
    return(posture);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80035b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80035b4:	b672      	cpsid	i
    return(int_posture);
 80035b6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <_txe_byte_pool_create+0x128>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <_txe_byte_pool_create+0x128>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80035d0:	f7ff fa22 	bl	8002a18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d102      	bne.n	80035e2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80035dc:	2302      	movs	r3, #2
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e0:	e029      	b.n	8003636 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80035e8:	2303      	movs	r3, #3
 80035ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ec:	e023      	b.n	8003636 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b63      	cmp	r3, #99	@ 0x63
 80035f2:	d802      	bhi.n	80035fa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80035f4:	2305      	movs	r3, #5
 80035f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f8:	e01d      	b.n	8003636 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80035fa:	4b19      	ldr	r3, [pc, #100]	@ (8003660 <_txe_byte_pool_create+0x134>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	4a18      	ldr	r2, [pc, #96]	@ (8003664 <_txe_byte_pool_create+0x138>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003608:	2313      	movs	r3, #19
 800360a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800360c:	f3ef 8305 	mrs	r3, IPSR
 8003610:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003612:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003614:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <_txe_byte_pool_create+0x13c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800361e:	f3ef 8305 	mrs	r3, IPSR
 8003622:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003624:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <_txe_byte_pool_create+0x13c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8003630:	d201      	bcs.n	8003636 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003632:	2313      	movs	r3, #19
 8003634:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7fe fdd8 	bl	80021f8 <_tx_byte_pool_create>
 8003648:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800364a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800364c:	4618      	mov	r0, r3
 800364e:	3748      	adds	r7, #72	@ 0x48
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	200081e4 	.word	0x200081e4
 8003658:	2000813c 	.word	0x2000813c
 800365c:	20008140 	.word	0x20008140
 8003660:	2000814c 	.word	0x2000814c
 8003664:	20008294 	.word	0x20008294
 8003668:	2000000c 	.word	0x2000000c

0800366c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b09a      	sub	sp, #104	@ 0x68
 8003670:	af06      	add	r7, sp, #24
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800367a:	2300      	movs	r3, #0
 800367c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003684:	230e      	movs	r3, #14
 8003686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003688:	e0bb      	b.n	8003802 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800368a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800368c:	2bb0      	cmp	r3, #176	@ 0xb0
 800368e:	d002      	beq.n	8003696 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003690:	230e      	movs	r3, #14
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	e0b5      	b.n	8003802 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003696:	f3ef 8310 	mrs	r3, PRIMASK
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80036a0:	b672      	cpsid	i
    return(int_posture);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80036a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80036a6:	4b64      	ldr	r3, [pc, #400]	@ (8003838 <_txe_thread_create+0x1cc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4a62      	ldr	r2, [pc, #392]	@ (8003838 <_txe_thread_create+0x1cc>)
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 80036c0:	4b5e      	ldr	r3, [pc, #376]	@ (800383c <_txe_thread_create+0x1d0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80036c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80036ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036cc:	3b01      	subs	r3, #1
 80036ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d0:	4413      	add	r3, r2
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	647b      	str	r3, [r7, #68]	@ 0x44
 80036dc:	e02b      	b.n	8003736 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d101      	bne.n	80036ea <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80036ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d028      	beq.n	8003742 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d308      	bcc.n	800370c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80036fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003700:	429a      	cmp	r2, r3
 8003702:	d203      	bcs.n	800370c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003704:	2300      	movs	r3, #0
 8003706:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800370c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003712:	429a      	cmp	r2, r3
 8003714:	d308      	bcc.n	8003728 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8003716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800371c:	429a      	cmp	r2, r3
 800371e:	d203      	bcs.n	8003728 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003720:	2300      	movs	r3, #0
 8003722:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8003728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003732:	3301      	adds	r3, #1
 8003734:	647b      	str	r3, [r7, #68]	@ 0x44
 8003736:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <_txe_thread_create+0x1d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800373c:	429a      	cmp	r2, r3
 800373e:	d3ce      	bcc.n	80036de <_txe_thread_create+0x72>
 8003740:	e000      	b.n	8003744 <_txe_thread_create+0xd8>
                break;
 8003742:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003744:	f3ef 8310 	mrs	r3, PRIMASK
 8003748:	61fb      	str	r3, [r7, #28]
    return(posture);
 800374a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800374c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800374e:	b672      	cpsid	i
    return(int_posture);
 8003750:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003754:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <_txe_thread_create+0x1cc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3b01      	subs	r3, #1
 800375a:	4a37      	ldr	r2, [pc, #220]	@ (8003838 <_txe_thread_create+0x1cc>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003760:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800376a:	f7ff f955 	bl	8002a18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003772:	429a      	cmp	r2, r3
 8003774:	d102      	bne.n	800377c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8003776:	230e      	movs	r3, #14
 8003778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800377a:	e042      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800377c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003782:	2303      	movs	r3, #3
 8003784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003786:	e03c      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800378e:	2303      	movs	r3, #3
 8003790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003792:	e036      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8003794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003796:	2bc7      	cmp	r3, #199	@ 0xc7
 8003798:	d802      	bhi.n	80037a0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800379a:	2305      	movs	r3, #5
 800379c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800379e:	e030      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80037a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037a2:	2b1f      	cmp	r3, #31
 80037a4:	d902      	bls.n	80037ac <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80037a6:	230f      	movs	r3, #15
 80037a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037aa:	e02a      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80037ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80037b4:	2318      	movs	r3, #24
 80037b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b8:	e023      	b.n	8003802 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80037ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d902      	bls.n	80037c6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80037c0:	2310      	movs	r3, #16
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e01d      	b.n	8003802 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80037c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003844 <_txe_thread_create+0x1d8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003848 <_txe_thread_create+0x1dc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80037d4:	2313      	movs	r3, #19
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80037d8:	f3ef 8305 	mrs	r3, IPSR
 80037dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80037de:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <_txe_thread_create+0x1e0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80037ea:	f3ef 8305 	mrs	r3, IPSR
 80037ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80037f0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <_txe_thread_create+0x1e0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80037fc:	d201      	bcs.n	8003802 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80037fe:	2313      	movs	r3, #19
 8003800:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d112      	bne.n	800382e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8003808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003812:	9303      	str	r3, [sp, #12]
 8003814:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7fe fef8 	bl	800261c <_tx_thread_create>
 800382c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800382e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003830:	4618      	mov	r0, r3
 8003832:	3750      	adds	r7, #80	@ 0x50
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200081e4 	.word	0x200081e4
 800383c:	20008154 	.word	0x20008154
 8003840:	20008158 	.word	0x20008158
 8003844:	2000814c 	.word	0x2000814c
 8003848:	20008294 	.word	0x20008294
 800384c:	2000000c 	.word	0x2000000c

08003850 <memset>:
 8003850:	4402      	add	r2, r0
 8003852:	4603      	mov	r3, r0
 8003854:	4293      	cmp	r3, r2
 8003856:	d100      	bne.n	800385a <memset+0xa>
 8003858:	4770      	bx	lr
 800385a:	f803 1b01 	strb.w	r1, [r3], #1
 800385e:	e7f9      	b.n	8003854 <memset+0x4>

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4d0d      	ldr	r5, [pc, #52]	@ (8003898 <__libc_init_array+0x38>)
 8003864:	2600      	movs	r6, #0
 8003866:	4c0d      	ldr	r4, [pc, #52]	@ (800389c <__libc_init_array+0x3c>)
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	4d0b      	ldr	r5, [pc, #44]	@ (80038a0 <__libc_init_array+0x40>)
 8003872:	2600      	movs	r6, #0
 8003874:	4c0b      	ldr	r4, [pc, #44]	@ (80038a4 <__libc_init_array+0x44>)
 8003876:	f000 f817 	bl	80038a8 <_init>
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	3601      	adds	r6, #1
 800388a:	4798      	blx	r3
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	3601      	adds	r6, #1
 8003894:	4798      	blx	r3
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08003908 	.word	0x08003908
 800389c:	08003908 	.word	0x08003908
 80038a0:	08003908 	.word	0x08003908
 80038a4:	0800390c 	.word	0x0800390c

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
